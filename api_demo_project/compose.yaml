name: demo_project
volumes:
  pgdata:

services:
  postgres:
    image: postgres:17
    restart: always
    shm_size: 2g
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_INITDB_ARGS: --encoding=UTF8 --lc-collate=C --lc-ctype=C
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  redis:
    image: redis

  api:
    # image, pull_policy联合使用，复用image而 migrate 不重新编译
    image: demo_project
    build: .
    pull_policy: never
    restart: always
    environment: &env
      DEBUG: "true"
      DB_URL: postgres://postgres:postgres@postgres/postgres
      REDIS_URL: redis://redis
    volumes:
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    command: gunicorn
    depends_on: # condition组织启动顺序
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully  # 执行完成并成功退出
      redis:
        condition: service_started
    # 以下为可选
    deploy: # 副本数量，可选
      mode: replicated
      replicas: 1
    init: true  # 如果有子进程创建, 避免应用程序生成僵尸进程
    ulimits:
      nofile:
        soft: 100000
        hard: 100000

  migrate:
    image: demo_project
    pull_policy: never
    restart: on-failure
    environment: *env
    command: python manage.py migrate
    depends_on:
      postgres:
        condition: service_healthy

  api2:
    image: demo_project
    pull_policy: never
    environment: *env
    command: [ "python","something.py" ]
    depends_on:
      - api # 等价于 condition: service_started
      - redis

  api3:
    image: demo_project
    pull_policy: never
    environment: # yaml只能merge字典, 若是列表方式，可通过锚点引用，不能merge
      <<: *env
      YET_ANOTHER: VARIABLE
      DB_URL: OVERRIDE
    ports:
      - "8002:8002"
    command: python manage.py runserver --noreload 0.0.0.0:8002
    depends_on:
      - api
